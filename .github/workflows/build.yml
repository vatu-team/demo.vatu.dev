# Vatu Deploy
# Version: 1.0.1
# Author: Michael Bragg <mike@vatu.co.uk>

name: Build

# All branches push to a `{current_branch_name}--built` branch.
# This new branch can be connected to a Git deployment process.
# To add extra deployment branches, add a new starting point to the allow branches.

on:
  push:
    branches:
      - 'main'
      - 'develop'

jobs:
  # Deploy code to production.
  #
  # Performs the following steps:
  # - Get current branch name.
  # - Checks out the repository.
  # - Sets up PHP with Composer.
  # - Logs debug information.
  # - Install Composer dependencies with development dependencies. || Install Composer dependencies with no dev option.
  # - Setup NodeJS.
  # - Logs debug information.
  # - Compile Theme.
  # - Check built branch exists.
  # - Checkout copy of repository. && Creating a *--built branch. || Using existing *--built branch.
  # - Rsync files to build directory.
  # - Remove `.gitignore` file.
  # - Setup deploy ignore files.
  # - Push build to deployment branch.

  build:
    name: "Build"
    runs-on: self-hosted
    steps:

      - name: "Get current branch name."
        run : |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: "Checks out the repository."
        uses: actions/checkout@v2

      - name: "Sets up PHP with Composer."
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: none
          ini-file: none

      - name: "Logs debug information."
        run: |
          php --version
          composer --version
          echo Current Branch: ${{ env.branch_name }}

      - name: "Install Composer dependencies with development dependencies."
        if: ${{ env.branch_name == 'develop' }}
        run: |
          composer install --no-interaction --prefer-dist --no-suggest --no-scripts
          composer dump-autoload --optimize

      - name: "Install Composer dependencies with no dev option."
        if: ${{ env.branch_name != 'develop' }}
        run: |
          composer install --no-dev --no-interaction --prefer-dist --no-suggest --no-scripts
          composer dump-autoload --optimize --no-dev

      - name: "Setup NodeJS."
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install

      - name: "Logs debug information."
        run: |
          node --version
          npm --version

      - name: "Compile Theme."
        run: |
          npm run build

      - name: "Check built branch exists."
        run: |
           echo "ls_remote=$( git ls-remote --heads "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git" ${{ env.branch_name }}--built | wc -l )" >> $GITHUB_ENV

      - name: "Checkout copy of repository."
        uses: actions/checkout@v2
        with:
          path: ./built
        if: ${{ env.ls_remote == 0 }}

      - name: "Creating a `--built` branch."
        if: ${{ env.ls_remote == 0 }}
        run: |
          cd ${GITHUB_WORKSPACE}/built/
          git checkout --orphan "${{ env.branch_name }}--built"
          git rm --cached -r .

      - name: "Using existing `--built` branch."
        uses: actions/checkout@v2
        with:
          ref: ${{ env.branch_name }}--built
          path: ./built
        if: ${{ env.ls_remote == 1 }}

      - name: "Rsync files to build directory."
        run: |
          rsync -a --exclude={'.git','built/'} "${GITHUB_WORKSPACE}/" "${GITHUB_WORKSPACE}/built/"
          ls -la ${GITHUB_WORKSPACE}/

      - name: "Remove `.gitignore` file."
        run: |
          rm ${GITHUB_WORKSPACE}/built/.gitignore
          rm ${GITHUB_WORKSPACE}/built/public/app/themes/*/.gitignore

      - name: "Setup deploy ignore files."
        run: mv ${GITHUB_WORKSPACE}/built/.deployignore ${GITHUB_WORKSPACE}/built/.gitignore

      - name: Push build to deployment branch.
        run: |
          cd ${GITHUB_WORKSPACE}/built/
          git config --global user.name '${{ github.event.pusher.name }}'
          git config --global user.email '${{ github.event.pusher.email }}'
          git add -A
          MESSAGE=$( printf 'Build changes from %s\n\n%s' "${GITHUB_SHA}" "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" )
          git commit --author="${{ github.event.pusher.name }} <${{ github.event.pusher.email }}>" -m "${MESSAGE}"
          git push origin ${{ env.branch_name }}--built
