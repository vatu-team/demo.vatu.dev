# Vatu Production Deploy
# Version: 0.1.0

name: Deploy to Production

on:
  push:
    branches:
      - 'feature/*'
      - '!*--built'
  workflow_dispatch:

jobs:
  # Deploy code to production.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Logs debug information.
  # - Install Composer dependencies with no dev option.
  # - Install NPM dependencies.
  # - Built theme.
  # - Remove `.gitignore` files.
  # - Remove deployment ignore files.
  # - Commit to `main-built`

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: "Checks out the repository."
        uses: "actions/checkout@v2"
      - name: Sets up PHP with Composer.
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      - name: Logs debug information.
        run: |
          php --version
          composer --version
      - name: Install Composer dependencies.
        run: composer install --no-dev --no-interaction --prefer-dist
      - name: "Making the build directory"
        run: |
          pwd
          git init "${GITHUB_WORKSPACE}/build/"
          cd ${GITHUB_WORKSPACE}/build/
          pwd
          git branch -m "main-build"
          git remote add origin ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git
          #git ls-remote --heads ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git
      - name: "Check for built branch."
        run: |
          echo 'GIT_LS_REMOTE=$(git ls-remote --heads "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git" main--built | wc -l)' >> $GITHUB_ENV
          echo ${ env.GIT_LS_REMOTE }
      - name: "Creating a main--built branch."
        if: env.GIT_LS_REMOTE
        run: |
          echo "Result: 0"
      # echo -e "\nCreating a main--built branch..."
      # git checkout --quiet --orphan main--built
      # pwd
      - name: "Using existing main--built branch"
        if: env.GIT_LS_REMOTE
        run: |
          echo "Result: 1"
      #     git fetch origin main--built --depth=1
      #     git checkout --quiet main--built
      # - name: "Rsync files to build directory"
      #   run: |
      #     rsync --delete -a "${GITHUB_WORKSPACE}/" "${GITHUB_WORKSPACE}/build/" --exclude='${GITHUB_WORKSPACE}/.git/' '${GITHUB_WORKSPACE}/build/'
      #     ls -a ${GITHUB_WORKSPACE}/build/
      # - name: "Remove `.gitignore` file"
      #   run: rm ${GITHUB_WORKSPACE}/build/.gitignore
      # - name: "Setup deploy ignore files."
      #   run: mv ${GITHUB_WORKSPACE}/build/.deployignore ${GITHUB_WORKSPACE}/build/.gitignore
      # - name: "List directory"
      #   run: ls -a ${GITHUB_WORKSPACE}/build/
      # - name: Push to built to deployment branch
      #   run: |
      #     cd ${GITHUB_WORKSPACE}/build/
      #     git config --global user.name '${{ github.event.pusher.name }}'
      #     git config --global user.email '${{ github.event.pusher.email }}'
      #     git status
      #     #git commit -am "Deploy"
      #     #git push origin main:main--built
