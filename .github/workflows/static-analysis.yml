# Vatu: Static Analysis
# Version: 0.4.0

name: Static Analysis

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:

  # Performs PHP CodeSnigger checks against our codebase.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up Caching.
  # - Sets up PHP with Composer.
  # - Install Composer dependencies for tool.
  # - Logs PHPCS debug information.
  # - Run PHPCS on project specific files.
  phpcs:
    name: "Run PHP CodeSniffer"
    runs-on: self-hosted
    steps:

      - name: "Checks out the repository."
        uses: "actions/checkout@v2"

      - name: "Sets up PHP with Composer."
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: "none"
          ini-values: "memory_limit=256M"
          tools: none
          ini-file: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get Composer Cache Directory."
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Sets up Caching."
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-composer-build-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php-composer-build-

      - name: "Install PHP Code Sniffer."
        run: composer update --working-dir=tools/phpcs --no-interaction --prefer-dist

      - name: "Logs debug information."
        run: |
          php --version
          composer --version
          php ./tools/phpcs/vendor/bin/phpcs -i

      - name: "Run PHPCS on project specific files."
        run: |
          composer run test-phpcs

  # Performs Copy Paste Detector against our codebase.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up Caching.
  # - Sets up PHP with Composer.
  # - Install Composer dependencies for tool.
  # - Logs debug information.
  # - Run PHPCPD on project specific files.
  phpcpd:
    name: "Run PHP Copy Paste Detector"
    runs-on: self-hosted
    steps:

      - name: "Checks out the repository."
        uses: "actions/checkout@v2"

      - name: "Sets up PHP with Composer."
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: "none"
          ini-values: "memory_limit=256M"
          tools: none
          ini-file: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get Composer Cache Directory."
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Sets up Caching."
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-composer-build-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php-composer-build-

      - name: "Install PHP Copy Paste Detector."
        run: composer update --working-dir=tools/phpcpd --no-interaction --prefer-dist

      - name: "Logs debug information."
        run: |
          php --version
          composer --version
          php ./tools/phpcpd/vendor/bin/phpcpd --version

      - name: "Run PHPCPD on project specific files."
        run: |
          composer run test-phpcpd

  # Performs PHP Mess Detector against our codebase.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up Caching.
  # - Sets up PHP with Composer.
  # - Install Composer dependencies for tool.
  # - Logs debug information.
  # - Run PHPMD on project specific files.
  phpmd:
    name: "Run PHP Mess Detector"
    runs-on: self-hosted
    steps:

      - name: "Checks out the repository."
        uses: "actions/checkout@v2"

      - name: "Sets up PHP with Composer."
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: "none"
          ini-values: "memory_limit=256M"
          tools: none
          ini-file: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get Composer Cache Directory."
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Sets up Caching."
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-composer-build-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php-composer-build-

      - name: "Install PHP Mess Detector."
        run: composer update --working-dir=tools/phpmd --no-interaction --prefer-dist

      - name: "Logs debug information."
        run: |
          php --version
          composer --version
          php ./tools/phpmd/vendor/bin/phpmd --version

      - name: "Run PHPMD on project specific files."
        run: |
          composer run test-phpmd

  # Performs PHP Magic Number Detector against our codebase.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up Caching.
  # - Sets up PHP with Composer.
  # - Install Composer dependencies for tool.
  # - Logs debug information.
  # - Run PHPMND on project specific files.
  phpmnd:
    name: "Run PHP Magic Numbers Detector"
    runs-on: self-hosted
    steps:

      - name: "Checks out the repository."
        uses: "actions/checkout@v2"

      - name: "Sets up PHP with Composer."
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: "none"
          ini-values: "memory_limit=256M"
          tools: none
          ini-file: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get Composer Cache Directory."
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Sets up Caching."
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-composer-build-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php-composer-build-

      - name: "Install PHP Magic Number Detector."
        run: composer update --working-dir=tools/phpmnd --no-interaction --prefer-dist

      - name: "Logs debug information."
        run: |
          php --version
          composer --version
          php ./tools/phpmnd/vendor/bin/phpmnd --version

      - name: "Run PHPMND on project specific files."
        run: |
          composer run test-phpmnd

  # Performs PHPStan against our codebase.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up PHP with Composer.
  # - Get Composer Cache Directory.
  # - Sets up Caching.
  # - Build Site.
  # - Install PHP Stan.
  # - Install Composer dependencies for tool.
  # - Logs debug information.
  # - Run PHPStan on project specific files.
  phpstan:
    name: "Run PHPStan"
    runs-on: self-hosted
    steps:

      - name: "Checks out the repository."
        uses: "actions/checkout@v2"

      - name: "Sets up PHP with Composer."
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"
          coverage: "none"
          ini-values: "memory_limit=256M"
          tools: none
          ini-file: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Get Composer Cache Directory."
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Sets up Caching."
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-composer-build-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php-composer-build-

      - name: "Build site."
        run: composer update --no-interaction --prefer-dist --no-scripts

      - name: "Install PHP Stan."
        run: composer update --working-dir=tools/phpstan --no-interaction --prefer-dist

      - name: "Logs debug information."
        run: |
          php --version
          composer --version
          php ./tools/phpstan/vendor/bin/phpstan --version

      - name: "Run PHPStan on project specific files."
        run: composer run test-phpstan
